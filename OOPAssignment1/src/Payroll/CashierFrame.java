package Payroll;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
// import javax.swing.JFileChooser;
import javax.swing.JOptionPane;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CashierFrame.java
 *
 * Created on 28-Jan-2014, 14:19:21
 */

/**
 *
 * @author hogan.38774
 */

// The Public Class CashierFrame.
public class CashierFrame extends javax.swing.JFrame {

    /* This next line of code is where the New Object of the Cashier Class is Being Created
       that will be used throughout this class to get Methods from the Cashier Class */
    cashier csh = new cashier();

    
    /** Creates new form CashierFrame */
    public CashierFrame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cashierPanel = new javax.swing.JPanel();
        nameText = new javax.swing.JTextField();
        addressText = new javax.swing.JTextField();
        ppsText = new javax.swing.JTextField();
        payrollText = new javax.swing.JTextField();
        dobText = new javax.swing.JTextField();
        ageText = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        addressLabel = new javax.swing.JLabel();
        ppsLabel = new javax.swing.JLabel();
        payrollLabel = new javax.swing.JLabel();
        dobLabel = new javax.swing.JLabel();
        ageLabel = new javax.swing.JLabel();
        nameMissingWarningLabel = new javax.swing.JLabel();
        addressMissingWarningLabel = new javax.swing.JLabel();
        ppsNoMissingWarningLabel = new javax.swing.JLabel();
        payrollNoMissingWarningLabel = new javax.swing.JLabel();
        DOBMissingWarningLabel = new javax.swing.JLabel();
        ageMissingWarningLabel = new javax.swing.JLabel();
        paymentCalcPanel = new javax.swing.JPanel();
        hoursWorkedLabel = new javax.swing.JLabel();
        hourlyRateLabel = new javax.swing.JLabel();
        hoursWorkedText = new javax.swing.JTextField();
        hourlyRateText = new javax.swing.JTextField();
        overTimeHoursLabel = new javax.swing.JLabel();
        overTimeHoursText = new javax.swing.JTextField();
        hoursWorkedMissingWarningLabel = new javax.swing.JLabel();
        hourlyRateMissingWarningLabel = new javax.swing.JLabel();
        overTimeHoursMissingWarningLabel = new javax.swing.JLabel();
        cashierHeadingLabel = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        mainMenuButton = new javax.swing.JButton();
        readFromFileButton = new javax.swing.JButton();
        writeToFileButton = new javax.swing.JButton();
        requiredFieldWarningLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cashier Payments");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        cashierPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cashier Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(0, 0, 153))); // NOI18N

        nameText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nameTextKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nameTextKeyTyped(evt);
            }
        });

        addressText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addressTextActionPerformed(evt);
            }
        });
        addressText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addressTextKeyPressed(evt);
            }
        });

        ppsText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ppsTextKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ppsTextKeyTyped(evt);
            }
        });

        payrollText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                payrollTextKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                payrollTextKeyTyped(evt);
            }
        });

        dobText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dobTextKeyPressed(evt);
            }
        });

        ageText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ageTextKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ageTextKeyTyped(evt);
            }
        });

        nameLabel.setText("Name:");

        addressLabel.setText("Address:");

        ppsLabel.setText("PPS No:");

        payrollLabel.setText("Payoll No:");

        dobLabel.setText("DOB:");

        ageLabel.setText("Age:");

        nameMissingWarningLabel.setFont(new java.awt.Font("Tahoma", 1, 12));
        nameMissingWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        nameMissingWarningLabel.setText("*");

        addressMissingWarningLabel.setFont(new java.awt.Font("Tahoma", 1, 12));
        addressMissingWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        addressMissingWarningLabel.setText("*");

        ppsNoMissingWarningLabel.setFont(new java.awt.Font("Tahoma", 1, 12));
        ppsNoMissingWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        ppsNoMissingWarningLabel.setText("*");

        payrollNoMissingWarningLabel.setFont(new java.awt.Font("Tahoma", 1, 12));
        payrollNoMissingWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        payrollNoMissingWarningLabel.setText("*");

        DOBMissingWarningLabel.setFont(new java.awt.Font("Tahoma", 1, 12));
        DOBMissingWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        DOBMissingWarningLabel.setText("*");

        ageMissingWarningLabel.setFont(new java.awt.Font("Tahoma", 1, 12));
        ageMissingWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        ageMissingWarningLabel.setText("*");

        javax.swing.GroupLayout cashierPanelLayout = new javax.swing.GroupLayout(cashierPanel);
        cashierPanel.setLayout(cashierPanelLayout);
        cashierPanelLayout.setHorizontalGroup(
            cashierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cashierPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cashierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, cashierPanelLayout.createSequentialGroup()
                        .addComponent(ageLabel)
                        .addGap(18, 18, 18)
                        .addComponent(ageText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ageMissingWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(cashierPanelLayout.createSequentialGroup()
                        .addGroup(cashierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(cashierPanelLayout.createSequentialGroup()
                                .addComponent(dobLabel)
                                .addGap(18, 18, 18)
                                .addComponent(dobText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(cashierPanelLayout.createSequentialGroup()
                                .addComponent(payrollLabel)
                                .addGap(18, 18, 18)
                                .addComponent(payrollText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(cashierPanelLayout.createSequentialGroup()
                                .addComponent(ppsLabel)
                                .addGap(18, 18, 18)
                                .addComponent(ppsText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(cashierPanelLayout.createSequentialGroup()
                                .addComponent(addressLabel)
                                .addGap(18, 18, 18)
                                .addComponent(addressText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cashierPanelLayout.createSequentialGroup()
                                .addComponent(nameLabel)
                                .addGap(18, 18, 18)
                                .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(cashierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameMissingWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addressMissingWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ppsNoMissingWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(payrollNoMissingWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DOBMissingWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)))
                .addContainerGap())
        );

        cashierPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addressText, ageText, dobText, nameText, payrollText, ppsText});

        cashierPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addressLabel, ageLabel, dobLabel, nameLabel, payrollLabel, ppsLabel});

        cashierPanelLayout.setVerticalGroup(
            cashierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cashierPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cashierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameMissingWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(cashierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addressLabel)
                    .addComponent(addressText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addressMissingWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(cashierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ppsLabel)
                    .addComponent(ppsText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ppsNoMissingWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(cashierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(payrollLabel)
                    .addComponent(payrollText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(payrollNoMissingWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(cashierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dobLabel)
                    .addComponent(dobText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DOBMissingWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(cashierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ageLabel)
                    .addComponent(ageText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ageMissingWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        paymentCalcPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Payment Calculations", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(0, 0, 153))); // NOI18N

        hoursWorkedLabel.setText("Hours Worked:");

        hourlyRateLabel.setText("Hourly Rate:");

        hoursWorkedText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hoursWorkedTextActionPerformed(evt);
            }
        });
        hoursWorkedText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                hoursWorkedTextKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                hoursWorkedTextKeyTyped(evt);
            }
        });

        hourlyRateText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hourlyRateTextActionPerformed(evt);
            }
        });
        hourlyRateText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                hourlyRateTextKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                hourlyRateTextKeyTyped(evt);
            }
        });

        overTimeHoursLabel.setText("Overtime Hours:");

        overTimeHoursText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                overTimeHoursTextKeyTyped(evt);
            }
        });

        hoursWorkedMissingWarningLabel.setFont(new java.awt.Font("Tahoma", 1, 12));
        hoursWorkedMissingWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        hoursWorkedMissingWarningLabel.setText("*");

        hourlyRateMissingWarningLabel.setFont(new java.awt.Font("Tahoma", 1, 12));
        hourlyRateMissingWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        hourlyRateMissingWarningLabel.setText("*");

        overTimeHoursMissingWarningLabel.setFont(new java.awt.Font("Tahoma", 1, 12));
        overTimeHoursMissingWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        overTimeHoursMissingWarningLabel.setText("*");

        javax.swing.GroupLayout paymentCalcPanelLayout = new javax.swing.GroupLayout(paymentCalcPanel);
        paymentCalcPanel.setLayout(paymentCalcPanelLayout);
        paymentCalcPanelLayout.setHorizontalGroup(
            paymentCalcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentCalcPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paymentCalcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hoursWorkedLabel)
                    .addComponent(hourlyRateLabel)
                    .addComponent(overTimeHoursLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paymentCalcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hourlyRateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hoursWorkedText, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(overTimeHoursText, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paymentCalcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hoursWorkedMissingWarningLabel)
                    .addComponent(hourlyRateMissingWarningLabel)
                    .addComponent(overTimeHoursMissingWarningLabel))
                .addGap(27, 27, 27))
        );

        paymentCalcPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {hourlyRateText, hoursWorkedText, overTimeHoursText});

        paymentCalcPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {hourlyRateLabel, hoursWorkedLabel, overTimeHoursLabel});

        paymentCalcPanelLayout.setVerticalGroup(
            paymentCalcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentCalcPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paymentCalcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hoursWorkedLabel)
                    .addComponent(hoursWorkedText, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hoursWorkedMissingWarningLabel))
                .addGap(18, 18, 18)
                .addGroup(paymentCalcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hourlyRateLabel)
                    .addComponent(hourlyRateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hourlyRateMissingWarningLabel))
                .addGap(18, 18, 18)
                .addGroup(paymentCalcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(overTimeHoursLabel)
                    .addComponent(overTimeHoursText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(overTimeHoursMissingWarningLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cashierHeadingLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        cashierHeadingLabel.setForeground(new java.awt.Color(0, 0, 153));
        cashierHeadingLabel.setText("Cashier Payment Page");
        cashierHeadingLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        mainMenuButton.setText("Main Menu");
        mainMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainMenuButtonActionPerformed(evt);
            }
        });

        readFromFileButton.setFont(new java.awt.Font("Arial", 1, 14));
        readFromFileButton.setForeground(new java.awt.Color(0, 51, 153));
        readFromFileButton.setText("Read From File");
        readFromFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readFromFileButtonActionPerformed(evt);
            }
        });

        writeToFileButton.setFont(new java.awt.Font("Arial", 1, 14));
        writeToFileButton.setForeground(new java.awt.Color(0, 51, 153));
        writeToFileButton.setText("Write To File");
        writeToFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeToFileButtonActionPerformed(evt);
            }
        });

        requiredFieldWarningLabel.setForeground(new java.awt.Color(255, 0, 0));
        requiredFieldWarningLabel.setText("Required Fields *");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cashierPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(mainMenuButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 179, Short.MAX_VALUE)
                                .addComponent(closeButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(writeToFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(readFromFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE))
                            .addComponent(requiredFieldWarningLabel)
                            .addComponent(paymentCalcPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cashierHeadingLabel)
                        .addGap(204, 204, 204))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cashierHeadingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(paymentCalcPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(readFromFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(writeToFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(requiredFieldWarningLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(closeButton)
                            .addComponent(mainMenuButton)))
                    .addComponent(cashierPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // Closes the Frame
        setVisible(false);
        dispose();
}//GEN-LAST:event_closeButtonActionPerformed

    private void mainMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainMenuButtonActionPerformed
        // An new Object of the Menu Frame is being created when the Menu Button is clicked, it then returns to the Main Menu.
        MenuFrame frame = new MenuFrame();
        frame.setVisible(true);
        dispose();
}//GEN-LAST:event_mainMenuButtonActionPerformed

    private void writeToFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeToFileButtonActionPerformed
        /* This Code (As far as the else part of this condition) deals with Validation on each field.
           if some are empty and the Write to file button is clicked, "Required Fields *" message appears on the
           User Interface and a Red Asterix Appears beside the Problem Field. */
        if (nameText.getText().isEmpty())
        {
            nameMissingWarningLabel.setVisible(true);
            requiredFieldWarningLabel.setVisible(true);    
        }
        else if(addressText.getText().isEmpty())
        {
            addressMissingWarningLabel.setVisible(true);
            requiredFieldWarningLabel.setVisible(true);            
        }
        else if(ppsText.getText().isEmpty())
        {
            ppsNoMissingWarningLabel.setVisible(true);
            requiredFieldWarningLabel.setVisible(true);
        }
        else if(payrollText.getText().isEmpty())
        {           
            payrollNoMissingWarningLabel.setVisible(true);
            requiredFieldWarningLabel.setVisible(true);
        }
        else if(dobText.getText().isEmpty())
        {            
            DOBMissingWarningLabel.setVisible(true);
            requiredFieldWarningLabel.setVisible(true);
        }
        else if(ageText.getText().isEmpty())
        {          
            ageMissingWarningLabel.setVisible(true);
            requiredFieldWarningLabel.setVisible(true);
        }
        else if(hoursWorkedText.getText().isEmpty())
        {
            requiredFieldWarningLabel.setVisible(true);
            hoursWorkedMissingWarningLabel.setVisible(true);
        }
        else if(hourlyRateText.getText().isEmpty())
        {
            hourlyRateMissingWarningLabel.setVisible(true);
            requiredFieldWarningLabel.setVisible(true);
        }
        else if(overTimeHoursText.getText().isEmpty())
        {
            overTimeHoursMissingWarningLabel.setVisible(true);
            requiredFieldWarningLabel.setVisible(true);
        }
        else if (nameText.getText().isEmpty() ||  addressText.getText().isEmpty() || ppsText.getText().isEmpty() || payrollText.getText().isEmpty() || dobText.getText().isEmpty() || ageText.getText().isEmpty() || hoursWorkedText.getText().isEmpty() || hourlyRateText.getText().isEmpty() || overTimeHoursText.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Please Fill all Fields");
            nameMissingWarningLabel.setVisible(true);
            addressMissingWarningLabel.setVisible(true);
            ppsNoMissingWarningLabel.setVisible(true);
            payrollNoMissingWarningLabel.setVisible(true);
            DOBMissingWarningLabel.setVisible(true);
            ageMissingWarningLabel.setVisible(true);
            hoursWorkedMissingWarningLabel.setVisible(true);
            hourlyRateMissingWarningLabel.setVisible(true);
            overTimeHoursMissingWarningLabel.setVisible(true);
        }
        else
        {
            // The below uses the Gets/sets methods to Attach values from the TextFields to the Object csh, of the Cashier Class.
            csh.setName(nameText.getText());
            csh.setAddress(addressText.getText());
            csh.setPPSNo(ppsText.getText());
            csh.setPayrollNo(Integer.parseInt(payrollText.getText()));
            csh.setDOB(dobText.getText());
            csh.setAge(Integer.parseInt(ageText.getText()));
            csh.setHoursWorked(Integer.parseInt(hoursWorkedText.getText()));
            csh.setHourlyRate(Integer.parseInt(hourlyRateText.getText()));
            csh.setOverTime(Integer.parseInt(overTimeHoursText.getText()));

            // This piece of code allows the new Object to call on the Method in the Cashier class.
            int OT = csh.calcOverTime(csh.getHourlyRate());

        
            // This section deals with the writing to the outfile to a textfilecomplete with it's path.
            try {
                FileWriter outFile = new FileWriter("J:/NSS 2013 2014/05. Object Oriented Programming/PayrollOutfileFolder/CashierPayments/" + csh.getName() + ".txt");
                //FileWriter outFile = new FileWriter("F:/NSS 2013 2014/05. Object Oriented Programming/PayrollOutfileFolder/CashierPayments/" + csh.getName() + ".txt");

                PrintWriter out = new PrintWriter(outFile);

                // Also could be written as follows on one line
                // Printwriter out = new PrintWriter(new FileWriter("C:/test/myfile.txt"));


                // Write text to file
                out.println("---------------------------------------------------");
                out.println("");
                out.println("Cashier Person " + csh.getName() + " Info:");
                out.println("");
                out.println("Name: " + "               " + csh.getName());
                out.println("\nAddress: " + "           " + csh.getAddress());
                out.println("\nPPS No: " + "            " + csh.getPPSNo());
                out.println("\nPayroll No: " + "        " + csh.getPayrollNo());
                out.println("\nDOB: " + "                  " + csh.getDOB());
                out.println("\nAge: " + "                    " + csh.getAge());
                out.println("");
                out.println("---------------------------------------------------");
                out.println("");
                out.println("Cashier " + csh.getName() + " Wage details:");
                out.println("");
                out.println("Hours Worked: " + "               " + csh.getHoursWorked());
                out.println("Hourly Rate: " + "                    " + csh.getHourlyRate());
                out.println("Weekly Pay: " + "                €" + csh.calcWage(csh.getHoursWorked(), (int) csh.getHourlyRate()));
                out.println("Overtime Hours: " + "             " + csh.getOverTime());
                out.println("Gross Pay: " + "                  €" + csh.calcGross(csh.getHoursWorked(), csh.getHourlyRate(), OT, csh.getOverTime()));
                out.println("Tax Rate =                        20%");
                out.println("");
                out.println("////////////////////////////////////////////////////");
                out.println("Net Pay: " + "                        €" + csh.calcNetPay(csh.getHoursWorked(), csh.getHourlyRate(), OT, csh.getOverTime()));
                out.println("////////////////////////////////////////////////////");
                out.close();

                JOptionPane.showMessageDialog(null, "File Successfully Saved");

            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_writeToFileButtonActionPerformed

    private void hourlyRateTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hourlyRateTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hourlyRateTextActionPerformed

    private void hoursWorkedTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hoursWorkedTextActionPerformed

    }//GEN-LAST:event_hoursWorkedTextActionPerformed

    private void hoursWorkedTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hoursWorkedTextKeyTyped
        // This Validation will allow only Numeric Values in the TextField.
        char charTyped = evt.getKeyChar();

        if(!(Character.isDigit(charTyped) || Character.isISOControl(charTyped)))
        {
            JOptionPane.showMessageDialog(null, "Please Enter Valid Hours Worked");
            hoursWorkedText.setText("");
            evt.consume();
        }
    }//GEN-LAST:event_hoursWorkedTextKeyTyped

    private void hoursWorkedTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hoursWorkedTextKeyPressed
        // On Enter, Enables the Next textfield, provided specified criteria are met.
        if(evt.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER)
        {
            hourlyRateText.setEnabled(true);
            hourlyRateText.requestFocusInWindow();
        }
    }//GEN-LAST:event_hoursWorkedTextKeyPressed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        // These are default fields status, that are executed upon Frame Launch.
        nameText.setText("");
        addressText.setText("");
        ppsText.setText("");
        payrollText.setText("");
        dobText.setText("");
        ageText.setText("");
        hoursWorkedText.setText("");
        hourlyRateText.setText("");
        overTimeHoursText.setText("");

        addressText.setEnabled(false);
        ppsText.setEnabled(false);
        payrollText.setEnabled(false);
        dobText.setEnabled(false);
        ageText.setEnabled(false);
        hoursWorkedText.setEnabled(false);
        hourlyRateText.setEnabled(false);
        overTimeHoursText.setEnabled(false);


        requiredFieldWarningLabel.setVisible(false);
        nameMissingWarningLabel.setVisible(false);
        addressMissingWarningLabel.setVisible(false);
        ppsNoMissingWarningLabel.setVisible(false);
        payrollNoMissingWarningLabel.setVisible(false);
        DOBMissingWarningLabel.setVisible(false);
        ageMissingWarningLabel.setVisible(false);
        hoursWorkedMissingWarningLabel.setVisible(false);
        hourlyRateMissingWarningLabel.setVisible(false);
        overTimeHoursMissingWarningLabel.setVisible(false);

        nameText.requestFocusInWindow();
    }//GEN-LAST:event_formWindowOpened

    private void nameTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameTextKeyPressed
        // On Enter, Enables the Next textfield, provided specified criteria are met.
        if(evt.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER)
        {
            addressText.setEnabled(true);
            addressText.requestFocusInWindow();
        }
    }//GEN-LAST:event_nameTextKeyPressed

    private void nameTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameTextKeyTyped
        // This Validation won't allow Numeric Values in the TextField.
        char charTyped = evt.getKeyChar();

        if(!(Character.isLetter(charTyped) || Character.isSpaceChar(charTyped) || Character.isISOControl(charTyped)))
        {
            JOptionPane.showMessageDialog(null, "Please Enter valid Characters");
            nameText.setText("");
            evt.consume();
        }
    }//GEN-LAST:event_nameTextKeyTyped

    private void addressTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addressTextActionPerformed

    private void addressTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addressTextKeyPressed
        // On Enter, Enables the Next textfield, provided specified criteria are met.
        if(evt.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER)
        {
            ppsText.setEnabled(true);
            ppsText.requestFocusInWindow();
        }
    }//GEN-LAST:event_addressTextKeyPressed

    private void ppsTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ppsTextKeyPressed
        // On Enter, Enables the Next textfield, provided specified criteria are met.
        if(evt.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER)
        {
            payrollText.setEnabled(true);
            payrollText.requestFocusInWindow();
        }
    }//GEN-LAST:event_ppsTextKeyPressed

    private void ppsTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ppsTextKeyTyped
        // This Validation alows only a Maximum number of 8 characters, the Last Letter is Automatically Coverted to Upper Case
        String convert = ppsText.getText();
        ppsText.setText("" + convert.toUpperCase());

        if (ppsText.getText().length()>= 8)
            {
                       evt.consume();
            }
    }//GEN-LAST:event_ppsTextKeyTyped

    private void payrollTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_payrollTextKeyPressed
        // On Enter, Enables the Next textfield, provided specified criteria are met.
        if(evt.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER)
        {
            dobText.setEnabled(true);
            dobText.requestFocusInWindow();
        }
    }//GEN-LAST:event_payrollTextKeyPressed

    private void payrollTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_payrollTextKeyTyped
        // This Validation will allow only Numeric Values in the TextField.
        char charTyped = evt.getKeyChar();

        if(!(Character.isDigit(charTyped) || Character.isISOControl(charTyped)))
        {
            JOptionPane.showMessageDialog(null, "Please Enter Digits Only");
            payrollText.setText("");
            evt.consume();
        }
    }//GEN-LAST:event_payrollTextKeyTyped

    private void dobTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dobTextKeyPressed
        // On Enter, Enables the Next textfield, provided specified criteria are met.
        if(evt.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER)
        {
            ageText.setEnabled(true);
            ageText.requestFocusInWindow();
        }
    }//GEN-LAST:event_dobTextKeyPressed

    private void ageTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ageTextKeyPressed
        // On Enter, Enables the Next textfield, provided specified criteria are met.
        if(evt.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER)
        {
            hoursWorkedText.setEnabled(true);
            hoursWorkedText.requestFocusInWindow();
        }
    }//GEN-LAST:event_ageTextKeyPressed

    private void ageTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ageTextKeyTyped
        // This Validation will allow only Numeric Values in the TextField.
        char charTyped = evt.getKeyChar();

        if(!(Character.isDigit(charTyped) || Character.isISOControl(charTyped)))
        {
            JOptionPane.showMessageDialog(null, "Please Enter a Valid Age");
            ageText.setText("");
            evt.consume();
        }
    }//GEN-LAST:event_ageTextKeyTyped

    private void hourlyRateTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hourlyRateTextKeyPressed
        // On Enter, Enables the Next textfield, provided specified criteria are met.
        if(evt.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER)
        {
            overTimeHoursText.setEnabled(true);
            overTimeHoursText.requestFocusInWindow();
        }
    }//GEN-LAST:event_hourlyRateTextKeyPressed

    private void hourlyRateTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hourlyRateTextKeyTyped
        // This Validation will allow only Numeric Values in the TextField.
        char charTyped = evt.getKeyChar();

        if(!(Character.isDigit(charTyped) || Character.isISOControl(charTyped)))
        {
            JOptionPane.showMessageDialog(null, "Please Enter a Valid Hourly Rate");
            hourlyRateText.setText("");
            evt.consume();
        }
    }//GEN-LAST:event_hourlyRateTextKeyTyped

    private void overTimeHoursTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_overTimeHoursTextKeyTyped
        // This Validation will allow only Numeric Values in the TextField.
        char charTyped = evt.getKeyChar();

        if(!(Character.isDigit(charTyped) || Character.isISOControl(charTyped)))
        {
            JOptionPane.showMessageDialog(null, "Please Enter Valid Sales Achieved");
            overTimeHoursText.setText("");
            evt.consume();
        }
    }//GEN-LAST:event_overTimeHoursTextKeyTyped

    private void readFromFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readFromFileButtonActionPerformed

// This Section of code reads the data from the outfile and sends it into the readFromFileFrame.java textArea

//        JFileChooser chooser = new JFileChooser();
//        chooser.showOpenDialog(null);
//        File f = chooser.getSelectedFile();
//        String filename = f.getAbsolutePath();

        readFromFileFrame frame1 = new readFromFileFrame();
        frame1.setVisible(true);

        try
        {
            //FileReader reader = new FileReader("F:/NSS 2013 2014/05. Object Oriented Programming/PayrollOutfileFolder/CashierPayments/" + csh.getName() + ".txt");
            FileReader reader = new FileReader("J:/NSS 2013 2014/05. Object Oriented Programming/PayrollOutfileFolder/CashierPayments/" + csh.getName() + ".txt");

            BufferedReader br = new BufferedReader(reader);

            readFromFileFrame.PaySlipPrintOutTextArea.read(br, null);
            br.close();
            readFromFileFrame.PaySlipPrintOutTextArea.requestFocus();
        }

        // Displays an Error if a File cannot be read.
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, "Read Fail");
        }
        dispose();
    }//GEN-LAST:event_readFromFileButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CashierFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DOBMissingWarningLabel;
    private javax.swing.JLabel addressLabel;
    private javax.swing.JLabel addressMissingWarningLabel;
    private javax.swing.JTextField addressText;
    private javax.swing.JLabel ageLabel;
    private javax.swing.JLabel ageMissingWarningLabel;
    private javax.swing.JTextField ageText;
    private javax.swing.JLabel cashierHeadingLabel;
    private javax.swing.JPanel cashierPanel;
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel dobLabel;
    private javax.swing.JTextField dobText;
    private javax.swing.JLabel hourlyRateLabel;
    private javax.swing.JLabel hourlyRateMissingWarningLabel;
    private javax.swing.JTextField hourlyRateText;
    private javax.swing.JLabel hoursWorkedLabel;
    private javax.swing.JLabel hoursWorkedMissingWarningLabel;
    private javax.swing.JTextField hoursWorkedText;
    private javax.swing.JButton mainMenuButton;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel nameMissingWarningLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JLabel overTimeHoursLabel;
    private javax.swing.JLabel overTimeHoursMissingWarningLabel;
    private javax.swing.JTextField overTimeHoursText;
    private javax.swing.JPanel paymentCalcPanel;
    private javax.swing.JLabel payrollLabel;
    private javax.swing.JLabel payrollNoMissingWarningLabel;
    private javax.swing.JTextField payrollText;
    private javax.swing.JLabel ppsLabel;
    private javax.swing.JLabel ppsNoMissingWarningLabel;
    private javax.swing.JTextField ppsText;
    private javax.swing.JButton readFromFileButton;
    private javax.swing.JLabel requiredFieldWarningLabel;
    private javax.swing.JButton writeToFileButton;
    // End of variables declaration//GEN-END:variables

}
